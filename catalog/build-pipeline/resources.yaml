---
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xbuildpipelines.platform.envato.dev
spec:
  group: platform.envato.dev
  names:
    kind: xBuildPipeline
    plural: xbuildpipelines
  claimNames:
    kind: BuildPipeline
    plural: buildpipelines
  versions:
    - name: v1alpha1
      served: true
      referenceable: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                repository:
                  type: string
                registry:
                  type: string
                testPath:
                  type: string
---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: build-pipeline
  namespace: crossplane-system
spec:
  resources:
  - name: pipeline
    base:
      apiVersion: tekton.dev/v1alpha1
      kind: Pipeline
      spec:
        description: |
          this pipeline offers a typical CI/CD process, with a flow including:
          - fetching a git repository as the source
          - using buildah to build a Docker image by Dockerfile
          - pusing the built Docker image to a desired repository
          - deploying it to Kubernetes cluster
        
        # Parameters
        params:
        - name: repo-url
          type: string
          description: The git repository URL to clone from.
        - name: tag-name
          type: string
          description: The git tag to clone.
        - name: image-full-path-with-tag
          type: string
          description: The image full path to host the built image, with version tag, e.g. image-registry.openshift-image-registry.svc:5000/tekton-pipelines/spring-boot-docker:v1.0.0.
        - name: deployment-manifest
          type: string
          description: The manifest file for deployment.

        # Workspaces
        workspaces:
        - name: workspace
        - name: maven-settings
        - name: empty-dir
        
        # Taksks
        tasks:

        # 1. Task - fetch-repository
        - name: fetch-repository
          taskRef:
            name: git-clone
          params:
          - name: url
            value: $(params.repo-url)
          - name: revision
            value: $(params.tag-name)
          - name: deleteExisting
            value: "true"
          workspaces:
          - name: output
            workspace: workspace


  - name: clone-task
    base:
      apiVersion: tekton.dev/v1beta1
      kind: Task
      metadata:
        name: git-clone
        labels:
          app.kubernetes.io/version: "0.1"
        annotations:
          tekton.dev/pipelines.minVersion: "0.12.1"
          tekton.dev/tags: git
          tekton.dev/displayName: "git clone"
      spec:
        description: >-
          These Tasks are Git tasks to work with repositories used by other tasks
          in your Pipeline.
          The git-clone Task will clone a repo from the provided url into the
          output Workspace. By default the repo will be cloned into the root of
          your Workspace. You can clone into a subdirectory by setting this Task's
          subdirectory param.
        workspaces:
          - name: output
            description: The git repo will be cloned onto the volume backing this workspace
        params:
          - name: url
            description: git url to clone
            type: string
          - name: revision
            description: git revision to checkout (branch, tag, sha, refâ€¦)
            type: string
            default: master
          - name: refspec
            description: (optional) git refspec to fetch before checking out revision
            default: ""
          - name: submodules
            description: defines if the resource should initialize and fetch the submodules
            type: string
            default: "true"
          - name: depth
            description: performs a shallow clone where only the most recent commit(s) will be fetched
            type: string
            default: "1"
          - name: sslVerify
            description: defines if http.sslVerify should be set to true or false in the global git config
            type: string
            default: "true"
          - name: subdirectory
            description: subdirectory inside the "output" workspace to clone the git repo into
            type: string
            default: ""
          - name: deleteExisting
            description: clean out the contents of the repo's destination directory (if it already exists) before trying to clone the repo there
            type: string
            default: "false"
          - name: httpProxy
            description: git HTTP proxy server for non-SSL requests
            type: string
            default: ""
          - name: httpsProxy
            description: git HTTPS proxy server for SSL requests
            type: string
            default: ""
          - name: noProxy
            description: git no proxy - opt out of proxying HTTP/HTTPS requests
            type: string
            default: ""
          - name: gitInitImage
            description: The image used where the git-init binary is.
            default: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.15.2"
            type: string
        results:
          - name: commit
            description: The precise commit SHA that was fetched by this Task
        steps:
          - name: clone
            image: $(params.gitInitImage)
            script: |
              CHECKOUT_DIR="$(workspaces.output.path)/$(params.subdirectory)"
              cleandir() {
                # Delete any existing contents of the repo directory if it exists.
                #
                # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
                # or the root of a mounted volume.
                if [[ -d "$CHECKOUT_DIR" ]] ; then
                  # Delete non-hidden files and directories
                  rm -rf "$CHECKOUT_DIR"/*
                  # Delete files and directories starting with . but excluding ..
                  rm -rf "$CHECKOUT_DIR"/.[!.]*
                  # Delete files and directories starting with .. plus any other character
                  rm -rf "$CHECKOUT_DIR"/..?*
                fi
              }
              if [[ "$(params.deleteExisting)" == "true" ]] ; then
                cleandir
              fi
              test -z "$(params.httpProxy)" || export HTTP_PROXY=$(params.httpProxy)
              test -z "$(params.httpsProxy)" || export HTTPS_PROXY=$(params.httpsProxy)
              test -z "$(params.noProxy)" || export NO_PROXY=$(params.noProxy)
              /ko-app/git-init \
                -url "$(params.url)" \
                -revision "$(params.revision)" \
                -refspec "$(params.refspec)" \
                -path "$CHECKOUT_DIR" \
                -sslVerify="$(params.sslVerify)" \
                -submodules="$(params.submodules)" \
                -depth "$(params.depth)"
              cd "$CHECKOUT_DIR"
              RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
              EXIT_CODE="$?"
              if [ "$EXIT_CODE" != 0 ]
              then
                exit $EXIT_CODE
              fi
              # Make sure we don't add a trailing newline to the result!
              echo -n "$RESULT_SHA" > $(results.commit.path)
  compositeTypeRef:
    apiVersion: platform.envato.dev/v1alpha1
    kind: xBuildPipeline
...